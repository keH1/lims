stages:
  - version
  - build
  - deploy
  - release 

include:
  - project: 'devops/gitlab/template-cicd'
    ref: '${CICDREF}'
    file: 'pipelines/common/build/build-new.yml'

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_REF_NAME == "main" || $CI_COMMIT_REF_NAME == "master" 
    - if: $CI_COMMIT_REF_NAME == "dev" || $CI_COMMIT_REF_NAME == "develop"
    - if: $env == "dev" && ( $CI_COMMIT_REF_NAME != "main" || $CI_COMMIT_REF_NAME != "master" )

version:
  stage: version
  image: alpine:3.21
  script:
    - |
      # Получаем номер сборки и имя ветки из переменных CI/CD
      build=${CI_PIPELINE_IID:-0}
      branch=${CI_COMMIT_BRANCH:-}
      
      # Определяем суффикс: пустой для основных веток, иначе -alpha
      suffix=""
      if ! echo "$branch" | grep -qE '^(dev(elop)?|master|main|release.+)'; then
        suffix="-alpha"
      fi
      
      # Задаём базовую версию 
      version=${VERSION}
      
      # Формируем полную версию
      full_version="${version}.${build}${suffix}"
      
      # Сохраняем версию в файл
      echo "$full_version" > version.txt
      echo "Вычисленная версия: $full_version"
  artifacts:
    expire_in: 1d
    paths:
      - version.txt
  tags:
    - docker
  retry: 2
   
deploy:
  stage: deploy
  needs:
    - job: version
      artifacts: true
    - job: build
  before_script:
    - mkdir -p /root/.docker/
    - echo "$DOCKER_AUTH_CONFIG" > /root/.docker/config.json
    - IMAGE_TAG=${CI_REGISTRY_IMAGE}:$(cat version.txt)
    - echo "EXPOSE_NGINX_PORT=80" > .env
    - echo "COMPOSE_PROJECT_NAME=lims-ulab" >> .env
    - echo "IMAGE_TAG=$IMAGE_TAG" >> .env
    - echo "TZ=Europe/Moscow" >> .env
  script:
    - docker compose -f docker-compose-webserver.yml up -d
    - docker exec web_server rm -rf /var/www/bitrix/ulab 
    - docker exec web_server mv /tmp/ulab /var/www/bitrix/
  tags:
    - deploy
  rules:
    - when: manual 

release:
  image: dockerhub.mos.ru/gitlab-org/release-cli:latest
  stage: release
  needs:
    - job: deploy
      optional: true   
    - job: version
      artifacts: true
  before_script:
    - IMAGE_TAG=$(cat version.txt)
  script:
    - echo "running release_job for $IMAGE_TAG"
    - release-cli create --description "$CI_PIPELINE_IID" --tag-name "$IMAGE_TAG" --ref "$CI_COMMIT_SHA"
  rules:
    - if: $CI_COMMIT_REF_NAME == "main"
      when: manual
  tags:
    - docker



